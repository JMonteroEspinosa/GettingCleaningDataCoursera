submit()
students3
submit()
?spread
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(names_from="test", values_from="grade") %>%
print
submit()
submit()
library(readr)
parse_number("class5")
students3
submit()
students4
submit()
submit()
submit()
passed
failed
library(swirl)
swirl()
reset()
swirl()
mutate(students4)
head(passed)
head(failed)
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion("dplyr")
play()
?bind_rows
info()
nxt()
bind_rows(passed, failed)
sat
play(
)
?gather
?into
?separate
next()
nxt()
submit()
# from wide to long
library(reshape2)
print(head(mtcars))
# moving index to column
mtcars$carname <- rownames(mtcars)
# from wide to long
library(reshape2)
print(head(mtcars))
# moving index to column
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"),
measure.vars = c("mpg", "hp"))
print(head(carMelt))
cylData <- dcast(carMelt, cyl ~ variable)
# from wide to long
library(reshape2)
print(head(mtcars))
# moving index to column
mtcars$carname <- rownames(mtcars)
# melt works by classifying according to id
# and creates two columns: 'variables', to know which variable 'value' refers to.
# the variables for which value is obtained are given in measure.vars
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"),
measure.vars = c("mpg", "hp"))
print(head(carMelt))
# CASTING DATA FRAMES
# d implies that output is dataframe
# variable is categorical, mpg or hp; so uses value to compute actual values
# by default, the function is nunique
cylData <- dcast(carMelt, cyl ~ variable)
# from wide to long
library(reshape2)
print(head(mtcars))
# moving index to column
mtcars$carname <- rownames(mtcars)
# melt works by classifying according to id
# and creates two columns: 'variables', to know which variable 'value' refers to.
# the variables for which value is obtained are given in measure.vars
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"),
measure.vars = c("mpg", "hp"))
print(head(carMelt))
# CASTING DATA FRAMES
# d implies that output is dataframe
# variable is categorical, mpg or hp; so uses value to compute actual values
# by default, the function is nunique
cylData <- dcast(carMelt, cyl ~ variable)
print(head(cylData))
# from wide to long
library(reshape2)
print(head(mtcars))
# moving index to column
mtcars$carname <- rownames(mtcars)
# melt works by classifying according to id
# and creates two columns: 'variables', to know which variable 'value' refers to.
# the variables for which value is obtained are given in measure.vars
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"),
measure.vars = c("mpg", "hp"))
print(head(carMelt))
# CASTING DATA FRAMES
# d implies that output is dataframe
# variable is categorical, mpg or hp; so uses value to compute actual values
# by default, the function is nunique
cylData <- dcast(carMelt, cyl ~ variable)
print(head(cylData))
source('~/Documents/coursera/dataCleaningR/Week3/reshape.R', echo=TRUE)
cylData <- dcast(carMelt, cyl ~ variable, mean)
print(cylData)
print(head(InsectSprays))
countBySpray <- tapply(InsectSprays$count, InsectSprays$spray, sum)
print(countBySpray)
splitIns <- split(InsectSprays$count, InsectSprays$spray)
print(splitIns)
splitCount <- lapply(splitIns, sum)
print(splitCount)
splitFinal <- unlist(splitCount)
print(splitFinal)
# or can apply and combine directly by
print(sapply(splitIns, sum))
# PLYR PACKAGE
library(plyr)
print(ddply(InsectSprays, .(spray), summarize, sum = sum(count)))
??ddply
print(ddply(InsectSprays, .(spray), summarize, sum = sum(count)))
# variation to create a variable
spraySums <- ddply(InsectSprays, .(spray), summarize, sum = ave(count, FUN = sum))
print(spraySums)
?ave
ave(1:3)
# subsetting- review
# further resources: Andrew Jaffe's lectures
set.seed(13435)
# random df created by sampling
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
# random subsetting
X <- X[sample(1:5),]
# adding NAs for two values of var2
X$var2[c(1, 3)] = NA
print(X)
# basic subsetting
print(X[, 1])  # first column
print(X[, "var1"])  # same with names
print(X[1:2, "var2"])  # two first rows of column var2
# logical subsetting
print(X[X$var1 <= 3 & X$var3 > 11, ])
print(X[X$var1 <= 3 | X$var3 > 15, ])
# dealing with missing values in logical expressions
print(X[which(X$var2 > 8), ])
# what if we don't use if...?
print(X[X$var2 > 8, ])
library(jpeg)
library(swirl)
swirl()
install_course("R Programming E")
install_course("Regression Models")
swirl()
skip()
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=.5)
seq(5, 10, length = 30)
my_seq- seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
info()
bye()
source('~/.active-rstudio-document')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
?strsplit
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
s2 <- sub("_", "", s2)
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
?grep
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
??str_trim
source('~/Documents/coursera/dataCleaningR/Week4/editText.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
?gsub
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/regex2.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
?locale
??locale
?locales
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates.R')
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
source('~/Documents/datacamp/R/TS/explore.R')
?Ts
?ts
source('~/Documents/datacamp/R/TS/explore.R')
source('~/Documents/datacamp/R/TS/explore.R')
source('~/Documents/datacamp/R/TS/explore.R')
source('~/Documents/datacamp/R/TS/explore.R')
source('~/Documents/datacamp/R/TS/explore.R')
source('~/Documents/datacamp/R/TS/explore.R')
source('~/Documents/datacamp/R/TS/explore.R')
source('~/Documents/datacamp/R/TS/explore.R')
source('~/Documents/datacamp/R/TS/explore.R')
?cycle
source('~/Documents/datacamp/R/ggplot2/grammar_intro.R')
library(datasets)
library(ggplot2)
print(str(diamonds))
plot_basic <- ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
geom_smooth()
# print(plot_basic)
# plotting lines with different colors depending on cut quality
coloured_lines <- ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_smooth()
# print(coloured_lines)
# scatter plot based on same colouring
coloured_scatter <- ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_point()
# print(coloured_scatter)
# gradually building a graph
coloured_scatter <- ggplot(diamonds, aes(x = carat, y = price))
# adding points with alpha
coloured_scatter <- coloured_scatter + geom_point(alpha = .2, aes(color = cut))
print(coloured_scatter)
coloured_scatter <- coloured_scatter + geom_smooth(aes(col = cut), se = F)
print(coloured_scatter)
plot_basic <- ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
geom_smooth()
print(plot_basic)
library(datasets)
library(ggplot2)
# diamonds has factors such as cut, that are used to colour the plot
print(str(diamonds))
# basic plot with two dims, price over carat. Does not distinguish
# between any category
plot_basic <- ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(col = 'red') +
geom_smooth()
print(plot_basic)
plot_basic <- ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(col = 'red') +
geom_smooth(col = 'green')
print(plot_basic)
ggplot(mtcars, aes(x = mpg, y = cyl)) +
geom_point()
print(str(mtcars))
# 1 - Map mpg to x and cyl to y
ggplot(mtcars, aes(x = mpg, y = cyl)) +
geom_point()
# aesthetics, part 1
print(str(mtcars))
mtcars$cyl <- as.factor(mtcars$cyl)
# 1 - Map mpg to x and cyl to y
ggplot(mtcars, aes(x = mpg, y = cyl)) +
geom_point()
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point()
?mtcars
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point(shape = 1, size = 4)
example_plot <- ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 1, size = 4)
print(example_plot)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 21, size = 4, alpha = .6)
final_plot <- ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl, col = am)) +
geom_point(shape = 21, size = 4, alpha = .6)
print(final_plot)
source('~/Documents/datacamp/R/ggplot2/aesthetics2.R')
source('~/Documents/datacamp/R/ggplot2/aesthetics2.R')
source('~/Documents/datacamp/R/ggplot2/attributes1.R')
source('~/Documents/datacamp/R/ggplot2/attributes2.R')
source('~/Documents/datacamp/R/ggplot2/aesthetics_after_attr.R')
library(datasets)
head(sat)
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
?interval
source('~/Documents/coursera/dataCleaningR/Week4/dates_swirl.R')
source('~/.active-rstudio-document')
View(dat)
?quantmod:::getSymbols.yahoo
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
gead(df)
head(df)
View(df)
View(df)
dim(df)
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
View(activities)
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
str(activities)
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
View(df)
# steps 2 to 4
library(dplyr)
setwd("/home/jmontero/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera")
# bring data from STEP 1
df <- readRDS("merged_data.RDS")
# STEP 2: extract only the mean and the std of each measurement
# add feature names to dataset
feature_names <- read.table("UCI HAR Dataset/features.txt",
stringsAsFactors = F)
feature_names <- feature_names$V2  # getting rid of index
# change names in df
names(df)[3:dim(df)[2]] <- feature_names
# remove duplicated features
df <- df[,!duplicated(names(df))]
?factor
?select
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
?grep
grep("subject", names(df))
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
View(df)
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
# steps 2 to 4
library(dplyr)
setwd("/home/jmontero/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera")
# bring data from STEP 1
df <- readRDS("merged_data.RDS")
# STEP 2: extract only the mean and the std of each measurement
# add feature names to dataset
feature_names <- read.table("UCI HAR Dataset/features.txt",
stringsAsFactors = F)
feature_names <- feature_names$V2  # getting rid of index
# change names in df
names(df)[3:dim(df)[2]] <- feature_names
# remove duplicated features
df <- df[,!duplicated(names(df))]
# select only means and stds AND subject, target
df <- df %>%
select( "subject" | "activity" | contains(c("std", "mean")))
# STEP 3: rename activities
# to-do: grab activities
# activities is a lookup-table
activities <- read.table("UCI HAR Dataset/activity_labels.txt",
stringsAsFactors = F)
# V1 equals current index, can drop it
activities <- activities$V2
print(activities[4])
View(activities)
df$activity <- factor(df$activity, labels = activities)
View(df)
table(grepl("^t", names(df)))
table(grepl("MeanFreq", names(df)))
table(grepl("meanFreq", names(df)))
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
table(grepl("meanFreq", names(df)))
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
View(df)
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
table(grepl("Mag", names(df)))
table(grepl("Total", names(df)))
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
View(df)
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/coursera/dataCleaningR/Week4/Assignment_folder/GettingCleaningDataCoursera/step2.R')
source('~/Documents/datacamp/R/textMining/cleanStrings2.R')
source('~/Documents/datacamp/R/textMining/cleanStrings2.R')
??replace_abbreviation
qdapDictionaries::abbreviations
source('~/Documents/datacamp/R/textMining/cleanStrings2.R')
qdapDictionaries::abbreviations
??replace_abbreviation
source('~/Documents/datacamp/R/textMining/cleanStrings2.R')
source('~/Documents/datacamp/R/textMining/cleanStrings2.R')
source('~/Documents/datacamp/R/textMining/cleanStrings2.R')
